                                               -----------------------
                                                  Objectify Tutorial 
                                               -----------------------
					                            Daniel Sagenschneider
                                               -----------------------

Objectify Tutorial

  This tutorial demonstrates using {{{https://github.com/objectify/objectify}Objectify}} to read/write data from the Google App Engine DataStore.
                                                                                                                          
  The example used in this tutorial is three end points:
  
   * <<<POST /posts>>> <<<\{"message":"Message to post"}>>> to create a post  
      
   * <<<GET /posts/\{id\}>>> to obtain a particular post
   
   * <<<GET /posts}>>> to obtain all posts
   
  {{{http://sourceforge.net/projects/officefloor/files/maven/maven2/net/officefloor/tutorial/ObjectifyHttpServer/${projectVersion}/ObjectifyHttpServer-${projectVersion}-project.zip/download}Download Tutorial Source}}



*WoOF configuration

  The configuration of the end points are as follows:
  
[./images/ObjectifyHttpServer-configuration.png] ObjectifyHttpServer screen shot.

  With the implementation as follows:
    
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/objectifyhttpserver/ObjectifyLogic.java|ignoreDownloadError=false}

  Note: the passed in Objectify will always obtain the appropriate context (regardless of being in a transaction or not).
  
  The Objectify entity is as follows:

%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/objectifyhttpserver/Post.java|ignoreDownloadError=false}



*Configuring Objectify

  Objectify is configured in <<<application.objects>>> as follows:
  
%{snippet|file=${basedir}/src/main/resources/application.objects|ignoreDownloadError=false}

  For performance reasons, the entities are not dynamically discovered.  As Google App Engine allows scaling to zero instances, the application must be brought up quickly to service the first request.  Having to inspect all jars and classes for entities is typically too slow.  Therefore, Objectify requires registering all entities with it manually.
  
  Therefore, to make the entities available to Objectify, the following is the above configured class:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/objectifyhttpserver/ObjectifyEntities.java|ignoreDownloadError=false}

  Note: for third party libraries requiring to store data, it is also possible to register entities via a {{{/apidocs/net/officefloor/nosql/objectify/ObjectifyEntityLocatorServiceFactory.html}ObjectifyEntityLocatorServiceFactory}}.  This allows the entities to be automatically registered when the library is added to the class path.
    


*Testing

  To make local testing easier, the {{{/apidocs/net/officefloor/nosql/objectify/mock/ObjectifyRule.html}ObjectifyRule}} automatically sets up a local data store for testing.
  
  This allows the following unit testing of applications using Objectify:
  
%{snippet|id=tutorial|file=${basedir}/src/test/java/net/officefloor/tutorial/objectifyhttpserver/ObjectifyHttpServerTest.java|ignoreDownloadError=false}



Next

  The {{{../PrototypeHttpServer/index.html}next tutorial}} covers creating quick prototype applications.
