				       ------------------
				    My First WoOF Application
				       ------------------
				      Daniel Sagenschneider
				       ------------------

  <<My first WoOF application>>
  
  This tutorial walks you through creating and running your first Web on OfficeFloor (WoOF) application.
  
%{toc}

Setup

  The following are the pre-requisite setup before working through the tutorial:

   [[1]] Install {{{http://maven.apache.org/download.html}Maven}}
  
   [[1]] Install {{{http://www.eclipse.org/downloads/}Eclipse}}
   
   [[1]] Install the {{{http://marketplace.eclipse.org/content/officefloor}OfficeFloor plug-in}} into Eclipse



Creating the WoOF project

  To create a WoOF project use the Maven WoOF archetype.  Run the following within an empty directory:

+-----------------------------------------+
    mvn archetype:generate -DarchetypeGroupId=${projectGroupId} -DarchetypeArtifactId=${projectArtifactId}
+-----------------------------------------+

  Select <<<${projectGroupId}:${projectArtifactId}>>> (if not already selected) and provide the Maven configuration parameters.  The tutorial uses the following parameters:

%{snippet|file=${basedir}/src/test/resources/projects/woof/archetype.properties|ignoreDownloadError=false}
  
  Once complete there should now be a directory created by the name of the artifactId.
  
  Change into the created directory and run the following to build the project:
  
+-----------------------------------------+
    mvn install
+-----------------------------------------+



Running the WoOF project from Maven

  Once the project is built, run the following within the project directory to start the application:

+-----------------------------------------+
    mvn net.officefloor.maven:officefloor-maven-plugin:${projectVersion}:open
+-----------------------------------------+

  Or add the following to maven <settings.xml>:
  
+-----------------------------------------+
  <pluginGroups>
    <pluginGroup>net.officefloor.maven</pluginGroup>
  </pluginGroups>
+-----------------------------------------+

  to run the simpler command:

+-----------------------------------------+
    mvn officefloor:open
+-----------------------------------------+

  The application will now be available at <<<http://localhost:7878/static>>>  and look as follows:
  
[./images/woof-archetype-static-screenshot.png] WoOF Archetype Static Page Screen Shot
  
  To stop the application, run:

+-----------------------------------------+
    mvn officefloor:close
+-----------------------------------------+




Running the WoOF project from within Eclipse

  To run the WoOF project from within Eclipse, right click on the <<<application.woof>>> file and <<<Run as... OfficeFloor>>>.




WoOF graphical configuration

  WoOF is configured through the <<<application.woof>>> file.  Opening this file with the OfficeFloor Eclipse Plug-in (i.e. WoOF Editor) will provide the following graphical configuration for the application.

[./images/woof-archetype-configuration.png] WoOF archetype project configuration.

  The very simple configuration shows two web pages with navigation back and forth between the pages.  This is a simple application.  See the {{{../../tutorials/index.html}other tutorials}} for other features (such as REST applications).
  
    * <<<static>>> : example static HTML page (useful for static content and wire framing a prototype web application)
    
    * <<<form>>> : example dynamic form to enter and validate information
     
  There are various other configuration items that can be added by dragging from the palette (hover over the bar on the left).  Please see the {{{../../tutorials/index.html}other tutorials}} for further details.

  

HTML templating and Java server logic

  The form page looks as follows:
  
[./images/woof-archetype-form-screenshot.png] WoOF Archetype Form Page Screen Shot

  The following is the HTML for the form page.

%{snippet|file=${basedir}/src/test/resources/projects/woof/reference/src/main/resources/form.woof.html|ignoreDownloadError=false}

  The instrumentation of HTML page is through the <#\{link\}>, <#\{bean ... $\}>, and <$\{property\}> tags that are mapped by name to methods on the following server POJO (plain old java object): 

%{snippet|file=${basedir}/src/test/resources/projects/woof/reference/src/main/java/net/officefloor/test/form/FormLogic.java|ignoreDownloadError=false}

  Beyond a few annotations the logic class is straight forward Java.
  
  Please see the {{{../../tutorials/index.html}other tutorials}} for explanation of the code and the further features available.



Unit testing the WoOF application

  The following unit test shows the ease in which to start and stop the application for unit testing.
  
%{snippet|file=${basedir}/src/test/resources/projects/woof/reference/src/test/java/net/officefloor/test/RunApplicationTest.java|ignoreDownloadError=false}
  
  

Congratulations

  Congratulations you have just created and run your first WoOF web application.
  
  The {{{../../tutorials/PrototypeHttpServer/index.html}next tutorial}} covers prototyping a web application with WoOF.

